import unittest
from timeit import timeit

from pilightcc.services.audio.audioanalyzer import SpectrumParser, AudioAnalyser

_MSG1 = "spectrum, endtime=(guint64)2500000000, timestamp=(guint64)2400000000, stream-time=(guint64)2400000000, running-time=(guint64)2400000000, duration=(guint64)100000000, magnitude=(float){ -28.070123672485352, -30.749044418334961, -33.143180847167969, -36.715190887451172, -40.343479156494141, -41.205394744873047, -41.560638427734375, -43.380313873291016, -46.788780212402344, -44.788078308105469, -42.305328369140625, -44.200847625732422, -40.548503875732422, -45.550392150878906, -46.724185943603516, -48.269428253173828, -51.178646087646484, -51.046237945556641, -49.490936279296875, -48.913726806640625, -49.530693054199219, -52.828620910644531, -52.078758239746094, -52.013782501220703, -52.997989654541016, -56.21478271484375, -55.835205078125, -56.219940185546875, -57.952301025390625, -62.604873657226562, -60.482810974121094, -58.831062316894531, -61.149932861328125, -61.567047119140625, -58.601184844970703, -60.795253753662109, -61.843009948730469, -63.226913452148438, -63.0216064453125, -61.332805633544922, -58.983997344970703, -58.646690368652344, -65.137275695800781, -64.511680603027344, -67.182647705078125, -66.760169982910156, -64.001670837402344, -66.311065673828125, -68.252510070800781, -65.517837524414062, -65.633865356445312, -66.019287109375, -65.434051513671875, -66.801239013671875, -68.136795043945312, -69.886146545410156, -71.071182250976562, -71.225425720214844, -68.818099975585938, -70.026008605957031, -66.050384521484375, -66.653907775878906, -66.2828369140625, -65.506828308105469, -66.304916381835938, -68.831565856933594, -68.145759582519531, -66.593887329101562, -65.731842041015625, -69.8892822265625, -68.144325256347656, -67.02142333984375, -69.02935791015625, -66.622467041015625, -68.351432800292969, -68.04571533203125, -70.514373779296875, -71.784934997558594, -69.944366455078125, -71.59356689453125, -68.998359680175781, -68.924209594726562, -71.486404418945312, -71.672943115234375, -71.02801513671875, -73.130470275878906, -73.786224365234375, -72.849273681640625, -73.184234619140625, -73.964820861816406, -75.090621948242188, -76.132926940917969, -75.9791259765625, -73.833259582519531, -76.507675170898438, -75.889350891113281, -74.05096435546875, -76.033271789550781, -74.589744567871094, -75.123558044433594, -76.096931457519531, -75.760726928710938, -78.022041320800781, -75.974090576171875, -77.533882141113281, -76.653663635253906, -76.268714904785156, -76.281829833984375, -77.650871276855469, -78.658660888671875, -78.417457580566406, -79.383338928222656, -78.981643676757812, -79.225387573242188, -79.512313842773438, -79.607864379882812, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80, -80 };"
_MSG2 = "spectrum, endtime=(guint64)1600000000, timestamp=(guint64)1500000000, stream-time=(guint64)1500000000, running-time=(guint64)1500000000, duration=(guint64)100000000, magnitude=(float


class SpectrumParserTestCase(unittest.TestCase):
    def setUp(self):
        self.parser = SpectrumParser()

    def test_parse_integrity_single_channel(self):
        pm = self.parser.parse_single_channel_message(_MSG1)
        self.assertTrue(len(pm) == 1)
        self.assertTrue(len(pm[0]) == 128)
        self.assertTrue(pm[0][127] == -80)

    def test_parse_integrity_multi_channel(self):
        pm = self.parser.parse_single_channel_message(_MSG1)
        self.assertTrue(len(pm) == 1)
        self.assertTrue(len(pm[0]) == 128)
        self.assertTrue(pm[0][127] == -80)


if __name__ == '__main__':
    unittest.main()
